<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Intermedia\Ksef\Apiv2\Models\Operations;


class PostApiV2AuthKsefTokenRequest
{
    /**
     * Wygenerowany wcześniej challenge.
     *
     * @var string $challenge
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('challenge')]
    public string $challenge;

    /**
     * Indentyfikator kontekstu do którego następuje uwierzytelnienie.
     *
     * @var PostApiV2AuthKsefTokenContextIdentifier $contextIdentifier
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('contextIdentifier')]
    #[\Speakeasy\Serializer\Annotation\Type('\Intermedia\Ksef\Apiv2\Models\Operations\PostApiV2AuthKsefTokenContextIdentifier')]
    public PostApiV2AuthKsefTokenContextIdentifier $contextIdentifier;

    /**
     * Zaszyfrowany token wraz z timestampem z challenge'a, w formacie `token|timestamp`.
     *
     * @var string $encryptedToken
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('encryptedToken')]
    public string $encryptedToken;

    /**
     * Polityka autoryzacji żądań przy każdym użyciu tokena dostępu.
     *
     * @var ?AuthorizationPolicy $authorizationPolicy
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('authorizationPolicy')]
    #[\Speakeasy\Serializer\Annotation\Type('\Intermedia\Ksef\Apiv2\Models\Operations\AuthorizationPolicy|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AuthorizationPolicy $authorizationPolicy = null;

    /**
     * @param  string  $challenge
     * @param  PostApiV2AuthKsefTokenContextIdentifier  $contextIdentifier
     * @param  string  $encryptedToken
     * @param  ?AuthorizationPolicy  $authorizationPolicy
     * @phpstan-pure
     */
    public function __construct(string $challenge, PostApiV2AuthKsefTokenContextIdentifier $contextIdentifier, string $encryptedToken, ?AuthorizationPolicy $authorizationPolicy = null)
    {
        $this->challenge = $challenge;
        $this->contextIdentifier = $contextIdentifier;
        $this->encryptedToken = $encryptedToken;
        $this->authorizationPolicy = $authorizationPolicy;
    }
}