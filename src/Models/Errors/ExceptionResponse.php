<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Intermedia\Ksef\Apiv2\Models\Errors;

use Intermedia\Ksef\Apiv2\Models\Components;
use Intermedia\Ksef\Apiv2\Utils;
class ExceptionResponse
{
    /**
     *
     * @var ?Components\Exception $exception
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('exception')]
    #[\Speakeasy\Serializer\Annotation\Type('\Intermedia\Ksef\Apiv2\Models\Components\Exception|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Components\Exception $exception = null;

    /**
     * Raw HTTP response; suitable for custom response parsing
     *
     * @var ?\Psr\Http\Message\ResponseInterface $rawResponse
     */
    #[\Speakeasy\Serializer\Annotation\Exclude]

    public ?\Psr\Http\Message\ResponseInterface $rawResponse = null;

    /**
     * @param  ?\Psr\Http\Message\ResponseInterface  $rawResponse
     * @param  ?Components\Exception  $exception
     * @phpstan-pure
     */
    public function __construct(?\Psr\Http\Message\ResponseInterface $rawResponse = null, ?Components\Exception $exception = null)
    {
        $this->exception = $exception;
        $this->rawResponse = $rawResponse;
    }

    public function toException(): ExceptionResponseThrowable
    {
        $serializer = Utils\JSON::createSerializer();
        $message = $serializer->serialize($this, 'json');
        $code = -1;

        return new ExceptionResponseThrowable($message, (int) $code, $this);
    }
}