<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Intermedia\Ksef\Apiv2;



/**
 * Client - KSeF API TE: **Wersja API:** 2.0.0 (build 2.0.0-rc4-te-20250827.1+d4adf52dbfb92d635d0069cba24a52e1e3d67e03)<br>
 *
 * **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>
 * **Historia zmian:** [Changelog](https://github.com/CIRFMF/ksef-docs/blob/main/api-changelog.md)<br>
 * **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 */
class Client
{
    public const SERVERS = [
        '/',
    ];

    public Auth $auth;

    public AuthSessions $authSessions;

    public Certificates $certificates;

    /**
     * Certyfikat KSeF to cyfrowe poświadczenie tożsamości podmiotu, wydawane przez system KSeF na wniosek uwierzytelnionego podmiotu. 
     *
     * Certyfikat ten może być wykorzystywany do:
     *
     * - uwierzytelniania się w systemie KSeF,
     * - realizacji operacji w trybie offline, w tym wystawiania faktur bezpośrednio w aplikacji użytkownika.
     *
     * **Uwaga**: Wnioskowanie o certyfikat KSeF jest możliwe wyłącznie po uwierzytelnieniu z wykorzystaniem podpisu (XAdES). Uwierzytelnienie przy użyciu tokenu systemowego KSeF nie pozwala na złożenie wniosku.
     *
     * @var Certyfikaty $$certyfikaty
     */
    public Certyfikaty $certyfikaty;

    public PublicKeyCertificates $publicKeyCertificates;

    public TestData1 $testData;

    public Testdata2 $testdata;

    public Permissions $permissions;

    public Invoices $invoices;

    public InvoiceExports $invoiceExports;

    public Sessions $sessions;

    public SessionInvoices $sessionInvoices;

    public Tokens $tokens;

    public OnlineSessionInvoices $onlineSessionInvoices;

    public SessionsBatch $sessionsBatch;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return ClientBuilder
     */
    public static function builder(): ClientBuilder
    {
        return new ClientBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->auth = new Auth($this->sdkConfiguration);
        $this->authSessions = new AuthSessions($this->sdkConfiguration);
        $this->certificates = new Certificates($this->sdkConfiguration);
        $this->certyfikaty = new Certyfikaty($this->sdkConfiguration);
        $this->publicKeyCertificates = new PublicKeyCertificates($this->sdkConfiguration);
        $this->testData = new TestData1($this->sdkConfiguration);
        $this->testdata = new Testdata2($this->sdkConfiguration);
        $this->permissions = new Permissions($this->sdkConfiguration);
        $this->invoices = new Invoices($this->sdkConfiguration);
        $this->invoiceExports = new InvoiceExports($this->sdkConfiguration);
        $this->sessions = new Sessions($this->sdkConfiguration);
        $this->sessionInvoices = new SessionInvoices($this->sdkConfiguration);
        $this->tokens = new Tokens($this->sdkConfiguration);
        $this->onlineSessionInvoices = new OnlineSessionInvoices($this->sdkConfiguration);
        $this->sessionsBatch = new SessionsBatch($this->sdkConfiguration);
        $this->initHooks();

    }

    private function initHooks(): void
    {
        $this->sdkConfiguration = $this->sdkConfiguration->hooks->sdkInit($this->sdkConfiguration);
    }
}